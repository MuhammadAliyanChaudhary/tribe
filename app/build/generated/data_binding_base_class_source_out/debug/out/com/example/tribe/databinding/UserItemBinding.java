// Generated by view binder compiler. Do not edit!
package com.example.tribe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.tribe.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UserItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final CircleImageView dependentProfileItem;

  @NonNull
  public final CircleImageView imgOff;

  @NonNull
  public final CircleImageView imgOn;

  @NonNull
  public final TextView lastMsg;

  @NonNull
  public final TextView username;

  private UserItemBinding(@NonNull RelativeLayout rootView,
      @NonNull CircleImageView dependentProfileItem, @NonNull CircleImageView imgOff,
      @NonNull CircleImageView imgOn, @NonNull TextView lastMsg, @NonNull TextView username) {
    this.rootView = rootView;
    this.dependentProfileItem = dependentProfileItem;
    this.imgOff = imgOff;
    this.imgOn = imgOn;
    this.lastMsg = lastMsg;
    this.username = username;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UserItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UserItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.user_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UserItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dependent_profile_item;
      CircleImageView dependentProfileItem = ViewBindings.findChildViewById(rootView, id);
      if (dependentProfileItem == null) {
        break missingId;
      }

      id = R.id.img_off;
      CircleImageView imgOff = ViewBindings.findChildViewById(rootView, id);
      if (imgOff == null) {
        break missingId;
      }

      id = R.id.img_on;
      CircleImageView imgOn = ViewBindings.findChildViewById(rootView, id);
      if (imgOn == null) {
        break missingId;
      }

      id = R.id.last_msg;
      TextView lastMsg = ViewBindings.findChildViewById(rootView, id);
      if (lastMsg == null) {
        break missingId;
      }

      id = R.id.username;
      TextView username = ViewBindings.findChildViewById(rootView, id);
      if (username == null) {
        break missingId;
      }

      return new UserItemBinding((RelativeLayout) rootView, dependentProfileItem, imgOff, imgOn,
          lastMsg, username);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
